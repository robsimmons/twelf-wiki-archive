A '''<tt>%covers</tt>''' declaration checks [[input coverage]] for a type family, which is one of the two kinds of [[coverage checking]] that Twelf performs. Running a <tt>[[%total]]</tt> declaration checks input coverage as well as [[output coverage]].

The <tt>%covers</tt> declaration essentially checks that your type family does an ML-style exhaustive match on its inputs; this does not establish that running your program will succeed, or even terminate!

== Example ==

For this example, we define a type <tt>elem</tt> with three elements, <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, and a relation <tt>rel</tt> with three positions. We will then use <tt>%covers</tt> to check coverage on this relation given a number of different ways of assigning positions as either inputs or outputs.

<twelf>
elem: type.

a: elem.
b: elem.
c: elem.

rel: elem -> elem -> elem -> type.
fail : type.

rel1 : rel a X c.
rel2 : rel b Y b <- fail.
rel3 : rel c c c <- rel c a c.

%worlds () (rel _ _ _) (fail).
</twelf>


The first <tt>%covers</tt> declaration below checks that <tt>rel</tt> covers the first position - it does, as there is one case for each of the three possibilities. This is true even though <tt>rel b X Y</tt> will fail and the query <tt>rel c X Y</tt> will loop forever. The second declaration checks that <tt>rel</tt> covers the second position, which happens trivially because the first case, labeled <tt>rel1</tt>, and the second case <tt>rel2</tt>, have a [[metavariable]] in the second position that matches any possible input.

<twelf check=true discard=true>
%covers rel +X1 -X2 -X3.
%covers rel -X1 +X2 -X3.
</twelf>


If we try to check coverage on the third position, however, we get an error; the third position does not have a case that handles <tt>a</tt>.

<twelf check=decl discard=true>
%covers rel -X1 -X2 +X3.
</twelf>


Furthermore, even though we cover the first and second positions individually, if we consider them together we leave out two cases, which is what Twelf's response below explains:

<twelf check=decl discard=true>
%covers rel +X1 +X2 -X3.
</twelf>

== Limitations ==

Coverage checking is a weak test; it only checks that at least one constant will immediately apply during proof search. For example, the following program coverage checks:

<twelf>
bit : type.
0 : bit.
1 : bit.

nope : bit -> type.
%mode nope +B.

not : bit -> bit -> type.
%mode not +B -B'.

n0 : not 0 1.
n1 : not 1 0.

zero : bit -> bit -> type.
%mode zero +B -B'.

cn : zero X 0
  <- nope X.

cz : zero X 0
  <- zero X 1.

cf : zero X 0
  <- not X X.

%worlds () (nope _) (not _ _) (zero _ _).
%covers zero +B -B'.
</twelf>

Although <tt>zero</tt> passes the coverage check, it always fails. <tt>cn</tt> matches all inputs, but then appeals to a subgoal (<tt>nope</tt>) that is empty and immediately fails. <tt>cz</tt> appeals recursively to <tt>zero</tt>, but insists that its output be <tt>1</tt>, so this also fails. <tt>cf</tt> appeals to the total relation <tt>not</tt>, but in a way that constrains the output so that it also always fails (see [[output freeness]]). To get all of these tests, you must use the [[%total]] declaration. Here, totality fails on the first case as expected:

<twelf check=decl discard=true>
%total D (zero D _).
</twelf>

== See also ==

* {{guide|chapter=9|section=54|title=Input Coverage}}
* [[Input coverage]]
* [[Coverage checking]]