A Twelf source file consists of a collection of ''declarations'', each of which is either
* a ''type declaration'', in which a new type family is introduced (and named),
* a ''value declaration'', in which a new ''value constructor'' is introduced and given a type,
* a ''signature check'', in which Twelf is asked to check a particular property of the type and value declarations given up to that point (collectively called the ''signature''), or
* another kind of directive that changes the behavior of Twelf in some way.
Signature checks and directives are indicated with keywords beginning with the '<tt>%</tt>' symbol, such as &nbsp;<tt>%mode</tt>,&nbsp; <tt>%worlds</tt>,&nbsp; <tt>%total</tt>,&nbsp; <tt>%name</tt>,&nbsp; etc., and comments are started with either '<tt>%&nbsp;</tt>' or '<tt>%%</tt>'.  Comments and judicious use of white space make source files more intelligible to readers.  We will have more to say about what we mean by type ''families'' in the next section, but, first, we look at some simpler data types.

As a first example, consider these declarations
<twelf>
% Days of the week
day : type.

sunday    : day.
monday    : day.
tuesday   : day.
wednesday : day.
thursday  : day.
friday    : day.
saturday  : day.
</twelf>
The keyword <tt>type</tt> in the first (type) declaration indicates that <tt>day</tt> is a new type, and, having made this declaration, the following seven (value) declarations introduce elements of this type.  These seven elements can also be viewed as ''nullary'' constructors, i.e., as operations that take an empty list of arguments and produce an element of type <tt>day</tt>.  This is a finite data type, but the same principle works for infinite types with unary and binary constructors (and, indeed, constructors of any arity):
<twelf>
% Natural numbers in "unary" form
nat : type.

0 : nat.            % zero element
s : nat -> nat.     % unary successor operator


% Natural number lists
nat_list : type.

nil  : nat_list.                       % empty list
cons : nat -> nat_list -> nat_list.    % (cons N L) is the list whose first element is N and the rest of whose elements is L


% Binary trees labelled with nats
nat_tree : type.

empty : nat_tree.                                    % empty tree
node  : nat -> nat_tree -> nat_tree -> nat_tree.     % (node N L R) is the tree with label N, left subtree L, and right subtree R.
</twelf>
In each of these three data structure definitions, the first declaration is a type declaration, and the following two are value declarations.
As with types in ML, the infix arrow, which associates to the right, indicates a "functional" type.  However, there is no computation here, just the declaration of types and constructors.  These declarations may be compared with the following ML definitions:
<pre>datatype day      = sunday | monday | tuesday | wednesday | thursday | friday | saturday;
datatype nat      = 0 | s of nat;                                (* s    : nat -> nat                            *)
datatype nat_list = nil | cons of nat * nat_list;                (* cons : nat * nat_list -> nat_list            *)
datatype nat_tree = empty | node of nat * nat_tree * nat_tree;   (* node : nat * nat_tree * nat_tree -> nat_tree *)
</pre>
One difference here is that Twelf has no built-in product type, so term constructors with arity two or greater, like <tt>cons</tt> (arity 2) and <tt>node</tt> (arity 3), have to be treated as curried higher-order functions.  The elements of type <tt>nat</tt>, in both Twelf and ML, are:
* <tt>0</tt>,
* <tt>s 0</tt>,
* <tt>s (s 0)</tt>,
* <tt>s (s (s 0))</tt>,
and so on; in fact, every element of <tt>nat</tt> results from applying the constructor <tt>s</tt> zero or more times to the constant (or nullary operator) <tt>0</tt>.  In this way, each natural number has a unique representative as an element of type <tt>nat</tt>, and each element of type <tt>nat</tt> corresponds to a unique natural number; this is the sense in which we say that we have represented the natural numbers in Twelf.
Some of the elements of Twelf's type <tt>nat_list</tt>, with their ML counterparts, are:
* <tt>nil</tt> &nbsp;&nbsp;(ML: <tt>nil</tt>),
* <tt>cons 0 nil</tt> &nbsp;&nbsp;(ML: <tt>cons(0, nil)</tt>),
* <tt>cons (s 0) (cons (s (s 0)) nil)</tt> &nbsp;&nbsp;(ML: <tt>cons(s 0, cons(s (s 0), nil))</tt>),
* <tt>cons (s (s 0)) (cons (s 0) (cons 0 nil))</tt> &nbsp;&nbsp;(ML: <tt>cons(s (s 0), cons(s 0, cons(0, nil)))</tt>);
these correspond to the lists <tt>[]</tt>, <tt>[0]</tt>, <tt>[1,2]</tt>, and <tt>[2,1,0]</tt>, respectively.
Finally, here are some elements of Twelf's type <tt>nat_tree</tt> (what are the corresponding ML terms?):
* <tt>empty</tt>,
* <tt>node 0 empty empty</tt>,
* <tt>node (s 0) (node (s (s 0)) empty empty) empty</tt>, and
* <tt>node (s (s 0)) (node 0 empty empty) (node (s 0) empty empty)</tt>.
In a similar way, any signature determines some types and elements of those types.

Twelf also has a definition facility, whereby we can introduce new identifiers to stand for already existing elements.  For example, we could introduce the identifiers <tt>zero</tt>, <tt>one</tt>, <tt>two</tt>, etc., to stand for the corresponding elements of type <tt>nat</tt>:
<twelf>
zero  = 0 : nat.
one   = s zero : nat.    % or: one   = s 0 : nat.
two   = s one : nat.     % or: two   = s (s 0) : nat.
three = s two : nat.     % or: three = s (s (s 0)) : nat.
four  = s three : nat.   % or: four  = s (s (s (s 0))) : nat.  etc.
</twelf>

== Type families ==

The type <tt>nat_list</tt> from the previous subsection has as elements ''all'' lists of natural numbers, of all lengths.  However, we can refine this type, replacing it with an infinite collection of types {L<sub>0</sub>, L<sub>1</sub>, L<sub>2</sub>, ...}, where for each natural number ''n'', the type L<sub>''n''</sub> consists of all natural number lists ''of length n''.  Thus L<sub>0</sub> has only the element <tt>nil</tt>; L<sub>1</sub> contains exactly the one-element lists <tt>cons 0 nil</tt>,&nbsp; <tt>cons (s 0) nil</tt>,&nbsp; <tt>cons (s (s 0)) nil</tt>,&nbsp; etc.; L<sub>2</sub> contains exactly the two-element lists, and so on, and the <tt>cons</tt> operator becomes an infinite family of operators {<tt>cons</tt><sub>0</sub> : <tt>nat</tt> &rarr; L<sub>0</sub> &rarr; L<sub>1</sub>, <tt>cons</tt><sub>1</sub> : <tt>nat</tt> &rarr; L<sub>1</sub> &rarr; L<sub>2</sub>, <tt>cons</tt><sub>2</sub> : <tt>nat</tt> &rarr; L<sub>2</sub> &rarr; L<sub>3</sub>, ...}.  This is how we could define each of these types and operations separately in Twelf:
<twelf discard="true">
nat_list0 : type.   % L_0:  lists of length 0
nat_list1 : type.   % L_1:  lists of length 1
nat_list2 : type.   % L_2:  lists of length 2
nat_list3 : type.   % L_3:  lists of length 3

nil : nat_list0.

cons0 : nat -> nat_list0 -> nat_list1.
cons1 : nat -> nat_list1 -> nat_list2.
cons2 : nat -> nat_list2 -> nat_list3.
</twelf>
Now, the list [0, 1, 2] would be represented as <tt>cons2 0 (cons1 (s 0) (cons0 (s (s 0)) nil))</tt>, and this term and its subterms would have types as follows:
* <tt>cons2 0 (cons1 (s 0) (cons0 (s (s 0)) nil))</tt> : <tt>nat_list3</tt>,
* <tt>cons1 (s 0) (cons0 (s (s 0)) nil)</tt> : <tt>nat_list2</tt>,
* <tt>cons0 (s (s 0)) nil</tt> : <tt>nat_list1</tt>, and
* <tt>nil</tt> : <tt>nat_list0</tt>.
Now each natural number list and <tt>cons</tt> operator comes (via its type) with an explicit length.  This refinement of the type gives us extra information, but it can get very tedious, depending on how far we need to carry it out.  Moreover, however far out we go, we will still only have a finite number of types and operations (the signature being finite), so we will not have represented all possible natural number lists.

This is where type families come in.  The index we are using to refine the list type is a natural number, but we have already defined a natural number type in Twelf, so let's use it to define this entire infinite family of types in one go:
<twelf discard="true">
% Natural number lists, indexed by length (a natural number)
nat_list : nat -> type.                                        % subsumes nat_list0, nat_list1, nat_list2, ...

nil : nat_list 0.
cons : {N:nat} nat -> nat_list N -> nat_list (s N).            % subsumes cons0, cons1, cons2, ....
</twelf>
Thus, we are representing the family {L<sub>0</sub>, L<sub>1</sub>, L<sub>2</sub>, ...} as a kind of function that takes a natural number ''n'' and gives the type L<sub>''n''</sub>.  We say that <tt>nat_list</tt> is a ''family'' of types, indexed by elements of <tt>nat</tt>.  Once this declaration is made, an infinite number of types come into existence, one for each element of <tt>nat</tt>:
* <tt>nat_list 0</tt>,
* <tt>nat_list (s 0)</tt>,
* <tt>nat_list (s (s 0))</tt>,
and so on.  Similarly, we are representing the family {<tt>cons</tt><sub>0</sub> : <tt>nat</tt> &rarr; L<sub>0</sub> &rarr; L<sub>1</sub>, <tt>cons</tt><sub>1</sub> : <tt>nat</tt> &rarr; L<sub>1</sub> &rarr; L<sub>2</sub>, <tt>cons</tt><sub>2</sub> : <tt>nat</tt> &rarr; L<sub>2</sub> &rarr; L<sub>3</sub>, ...} as a kind of function that takes a natural number ''n'' and gives the associated operation of type <tt>nat</tt> &rarr; L<sub>''n''</sub> &rarr; L<sub>''n''+1</sub>.  The prefix <tt>{N:nat}</tt> in the declaration for <tt>cons</tt> above can be thought of both as a universal quantifier and as an additional argument to <tt>cons</tt> on which the rest of its type depends.  Thus, this declaration can be read, "for every element <tt>N</tt> of type <tt>nat</tt>, <tt>cons</tt> applied to <tt>N</tt> is an operator of type <tt>nat -> nat_list&nbsp;N -> nat_list&nbsp;(s&nbsp;N)</tt>.  In particular,
* <tt>cons 0 : nat -> nat_list 0 -> nat_list (s 0)</tt>,
* <tt>cons (s 0) : nat -> nat_list (s 0) -> nat_list (s (s 0))</tt>,
* <tt>cons (s (s 0)) : nat -> nat_list (s (s 0)) -> nat_list (s (s (s 0)))</tt>,
and so on.  Thus, just as <tt>nat_list</tt> is a ''type'' family indexed by elements of the type <tt>nat</tt>, so <tt>cons</tt> is a ''value'' family indexed by elements of type <tt>nat</tt>, with the type dependent on what natural-number index <tt>cons</tt> is applied to.  With these declarations, the list [0, 1, 2] would be represented as
 <tt>cons (s (s 0)) 0 (cons (s 0) (s 0) (cons 0 (s (s 0)) nil))</tt>.
(Compare this to <tt>cons2 0 (cons1 (s 0) (cons0 (s (s 0)) nil))</tt> above.)  We have thus effectively "internalized" our previous "external" family of types and operators, and extended it to all natural numbers.

Let's examine this universal quantification more closely.  The general form of a universally quantified type is <tt>{X:t} P(X)</tt>, where <tt>t</tt> is a type, called the index type, and <tt>P(X)</tt> is a type expression, called the body of the type, which has zero or more occurrences of the value variable <tt>X</tt>.  The actual variable used in the quantification is immaterial:  the type <tt>{X:t} P(X)</tt> is the same as the type <tt>{N:t} P(N)</tt>.  In the type of <tt>cons</tt> above, the type <tt>t</tt> is <tt>nat</tt>, the value variable is <tt>N</tt>, and the body is <tt>nat -> nat_list&nbsp;N -> nat_list&nbsp;(s&nbsp;N)</tt>.  Twelf only allows value variables in quantifications; it does not allow type variables or quantifications of the form <tt>{T:type}</tt>, which would require type variables.

So, what are the elements of the <tt>t</tt>-indexed type family <tt>{X:t} P(X)</tt>?  As suggested above, they are <tt>t</tt>-indexed ''value families'', where the value at a particular index <tt>v</tt> of the value family has the type that is at the same index <tt>v</tt> of the type family, namely <tt>P(v)</tt>.  Thus, they are functions <tt>f</tt> whose domain is <tt>t</tt> and are such that <tt>f v : P(v)</tt> for any value <tt>v:t</tt>, i.e., functions whose result type depends (uniformly) on which value they are given as input.

Now, it may turn out that <tt>P(X)</tt> doesn't actually have any occurrences of <tt>X</tt>, in which case the body doesn't depend on the value of the index and is thus the same for all indices.  Let's call this common type <tt>p</tt>.  Then, elements of <tt>{X:t}&nbsp;P(X)</tt> are just functions from <tt>t</tt> to <tt>p</tt>, i.e., elements of the type <tt>t -> p</tt>.  This shows that universally quantified types subsume ordinary function types, and indeed, Twelf treats the function type <tt>A -> B</tt> as an abbreviation for the quantified type <tt>{X:A} B</tt>, where <tt>X</tt> is a value variable that doesn't occur in <tt>B</tt>.  Thus, the actual type of <tt>cons</tt> above is
 cons : {N:nat} {M:nat} {L:nat_list N} nat_list (s N),
where the value variables <tt>M</tt> and <tt>L</tt> were chosen arbitrarily.

Just like universal quantifiers, type families can be iterated.  For example, if we had a type declaration
 iter : {N:nat} nat_list N -> type.
then we could introduce types with prefixes such as <tt>{N:nat} {L:nat_list N} {I:iter N L}</tt> ....  It may not seem so now, but such deeply nested quantifier prefixes are quite common and useful, and it is not unusual for a type constructor to have a dozen or more quantifiers in its type.  As you might imagine, however, it can get very tedious to supply all of these arguments every time the constructor is used, especially since they can, in most instances, be inferred from the context.  Fortunately, Twelf has a mechanism by which these prefixes can be omitted from both the type declarations of the constructors and from the uses of the constructors in terms.  For example, we could have left out the quantifier in the definition of <tt>cons</tt>:
<twelf>
% Natural number lists, indexed by length (a natural number)
nat_list : nat -> type.

nil : nat_list 0.
cons : nat -> nat_list N -> nat_list (s N).
</twelf>
Now, the value variable <tt>N</tt> in <tt>cons</tt> is ''free'' (i.e., not quantified), so Twelf automatically tries to infer the appropriate quantifier.  It can do so in this case, since <tt>N</tt> is being used as an argument to <tt>nat_list</tt>, which expects to be applied to a <tt>nat</tt>, so Twelf infers the quantifier <tt>{N:nat}</tt> for <tt>N</tt>.  Also, the second occurrence of <tt>N</tt> in the type is consistent, since the type of <tt>s</tt> is <tt>nat -> nat</tt>, so the type of <tt>s N</tt> is <tt>nat</tt>, which again is what <tt>nat_list</tt> expects.  With this abbreviated declaration, the list [0,1,2] would be represented by
 cons 0 (cons 1 (cons 2 nil)),
just as it was before we refined <tt>nat_list</tt> into a type family indexed by length.  Twelf is automatically supplying the correct first arguments to each instance of <tt>cons</tt>, using the following reasoning.  The type of <tt>nil</tt> is <tt>nat_list 0</tt>, so the missing argument of <tt>cons</tt> in <tt>cons 2 nil</tt> must be <tt>0</tt>, the type of this expression being <tt>nat_list (s 0)</tt>.  But then the missing argument in the middle instance of <tt>cons</tt> has to be <tt>s 0</tt>, making the type of the expression <tt>cons 1 (cons 2 nil)</tt> be <tt>nat_list (s 0)</tt>.  Finally, that means that the missing argument in the first instance of <tt>cons</tt> has to be <tt>s (s 0)</tt>, and so the complete term can be reconstructed.  As we shall see, this kind of reconstruction is the rule, rather than the exception, and it makes working with Twelf much easier that it would without it.

== Representing relations and functions ==

A crucial feature of Twelf is that we can use it to represent not only data structures but also the logic we use to reason about them.  Ordinary predicate logic is built up from primitive predicates and relations using logical connectives such as "and", "or", and "implies", and quantifiers such as "for all" and "there exists".  In Twelf, we us a computational interpretation of logic based on the so-called "Propositions as Types" principle, meaning that we represent statements in our logic as types (or type families), and proofs of these statements as elements of the associated types.  This has two important consequences:  (1) the logic and reasoning methods we can use are somewhat restricted (technically, we are restricted to the &forall;&exist; fragment, and our reasoning must be ''Intuitionistic'' or ''constructive'', about which we will have more to say later), and (2) propositions, being types, are themselves data structures that can therefore be reasoned about in Twelf, allowing us to iterate the process of representation and reasoning to any desired level.

A relation, R, among objects from sets A<sub>1</sub>, ..., A<sub>n</sub> is usually taken to be a subset of the cartesian product:  R ⊂ A<sub>1</sub> Χ ... Χ A<sub>n</sub>.  The elements of this cartesian product are tuples &lsaquo;a<sub>1</sub>, ..., a<sub>n</sub>&rsaquo;, where each a<sub>i</sub> is an element of A<sub>i</sub>.  The idea is that the subset R collects together all of the tuples that stand in the relation, thus providing a set-theoretic counterpart to the informal relation.  Unfortunately, the type theory underlying Twelf cannot directly represent general subsets, and, as we have noted above, it doesn't have products either.  But what we ''can'' do is, in some ways, even better: we represent the relation R between A<sub>1</sub>, ..., A<sub>n</sub> as a type family
 R : A<sub>1</sub> -> ... -> A<sub>n</sub> -> type.
Now, for every tuple &lsaquo;a<sub>1</sub>, ..., a<sub>n</sub>&rsaquo;, there is a type <tt>R a<sub>1</sub> ... a<sub>n</sub></tt>, and we take this to be the type of ''evidence'' for the relationship between a<sub>1</sub>, ..., a<sub>n</sub> according to <tt>R</tt>.  If this type has at least one element (and in practice it will then have exactly one element), then, there being evidence for the relationship, we say that the elements a<sub>1</sub>, ..., a<sub>n</sub> are related by R.  On the other hand, if this type is empty, i.e., it has no elements, then the indicated relationship does not hold.  To repeat, a relation is represented as a type family, and each instance of the relation is not just true or false but a separate ''type'' whose elements represent ''evidence'' of its truth.  The absence of such evidence means that the particular instance does not hold.

Let's look at some examples.  Recall the type <tt>day</tt> with elements <tt>sunday</tt>, <tt>monday</tt>, ..., <tt>saturday</tt>, and consider the "next day" relation that a relates a day with the following day.  Here is how we represent this relation in Twelf:
<twelf>
% Next-day relation on day
next_day : day -> day -> type.

next_day_sun : next_day sunday monday.
next_day_mon : next_day monday tuesday.
next_day_tue : next_day tuesday wednesday.
next_day_wed : next_day wednesday thursday.
next_day_thu : next_day thursday friday.
next_day_fri : next_day friday saturday.
next_day_sat : next_day saturday sunday.
</twelf>
The <tt>next_day</tt> relation is a binary relation on <tt>day</tt> and is therefore represented as a type family doubly indexed by <tt>day</tt>.  The next seven declarations introduce elements that stand for the evidence that specific instances of the "next day" relation hold (their names were chosen to be mnemonic but could be any identifiers).  Thus, these seven pairs of days stand in the relation and no others do.

Given this relation, we can define another relation, called <tt>dat</tt> ("day after tomorrow"), that relates each day with the day two days later:

<twelf discard="true">
% Day after tomorrow relation on day
dat : day -> day -> type.

dat_def : {D1:day}{D2:day}{D3:day} next_day D1 D2 -> next_day D2 D3 -> dat D1 D3.
</twelf>
Logically, the declaration of <tt>dat_def</tt> can be read, "for all days <tt>D1</tt>, <tt>D2</tt>, and <tt>D3</tt>, if the day after <tt>D1</tt> is <tt>D2</tt>, and the day after <tt>D2</tt> is <tt>D3</tt>, then the day two days after <tt>D1</tt> is <tt>D3</tt>."  In terms of evidence, <tt>dat_def</tt> is a constructor that, given any days <tt>D1</tt>, <tt>D2</tt>, and <tt>D3</tt>, along with evidence for <tt>next_day D1 D2</tt> and <tt>next_day D2 D3</tt>, represents evidence for <tt>dat D1 D3</tt>.  For example, we have
 dat_def sunday monday tuesday next_day_sun next_day_mon : dat sunday tuesday.
That is, Tuesday is two days after Sunday, according to these definitions, because there exists evidence for <tt>dat sunday tuesday</tt>, namely the element to the left of the colon above; this element is well-typed, since <tt>dat_def</tt> is being applied correctly to five arguments, with
* <tt>sunday : day</tt> (so that <tt>D1</tt> is instantiated to <tt>sunday</tt>),
* <tt>monday : day</tt> (so that <tt>D2</tt> is instantiated to <tt>monday</tt>),
* <tt>tuesday : day</tt> (so that <tt>D3</tt> is istantiated to <tt>tuesday</tt>),
* <tt>next_day_sun : next_day sunday monday</tt> (i.e., <tt>next_day D1 D2</tt>), and
* <tt>next_day_mon : next_day monday tuesday</tt> (i.e., <tt>next_day D2 D3</tt>),
the whole term thus having type <tt>dat sunday tuesday</tt> (i.e., <tt>dat D1 D3</tt>).  In this way, the only pairs of days in the <tt>dat</tt> relation are those pairs where the second day is two days after the first.

Just as we observed at the end of the previous section, the three quantifiers in the declaration of <tt>dat_def</tt> above can be omitted:
<twelf>
% Day after tomorrow relation on day
dat : day -> day -> type.

dat_def : next_day D1 D2 -> next_day D2 D3 -> dat D1 D3.
</twelf>
Because the declarations of <tt>next_day</tt> and <tt>dat</tt> show that both constructors expect to be applied to two arguments of type <tt>day</tt>, Twelf can reconstruct the quantifiers for <tt>D1</tt>, <tt>D2</tt>, and <tt>D3</tt> automatically.  Furthermore, we can define the identifier <tt>dat_sunday</tt> to stand for the evidence that Tuesday is two days after Sunday as follows:
<twelf>
dat_sunday = dat_def next_day_sun next_day_mon : dat sunday tuesday.
</twelf>
where the first three arguments of <tt>dat_def</tt> corresponding to the omitted quantifiers can be reconstructed from the types of <tt>next_day_sun</tt> and <tt>next_day_mon</tt>.  From this point on, we will engage in the standard practice in Twelf of omitting quantifiers whenever possible, relying on term reconstruction to supply them automatically.

Finally, a word about '''functions'''.  Although we've encoded <tt>next_day</tt> and <tt>dat</tt> as relations, they are in fact (the graphs of) functions.  That is, there exist functions ''f'' and ''g'' such that for all elements ''d''<sub>1</sub> and ''d''<sub>2</sub> of type <tt>day</tt>, ''f''(''d''<sub>1</sub>) = ''d''<sub>2</sub> if and only if <tt>next_day </tt>''d''<sub>1</sub> ''d''<sub>2</sub>, and ''g''(''d''<sub>1</sub>) = ''d''<sub>2</sub> if and only if <tt>dat </tt>''d''<sub>1</sub> ''d''<sub>2</sub>.  Relations that arise from functions in this way are special; we call them ''functional''.  To make this more precise, let's take <tt>next_day</tt> as an example.  If we designate the first argument of <tt>next_day</tt> as an ''input'' argument and the second argument as an ''output'' argument, then this relation has the property that, for any possible combination of input arguments, there is exactly one combination of output arguments for which the relation holds, i.e., the associated type is non-empty&mdash;or, as we say in a more positive way, ''inhabited''.  The same is true if we designate the first argument of <tt>dat</tt> as input and its second argument as output.  In fact, the same is true if we designate the second arguments of <tt>next_day</tt> and <tt>dat</tt> as inputs and their first arguments as outputs.  These latter designations would correspond to the inverse functions "previous day" and "two days ago".  We will see in a later section how we can designate certain arguments of relations as inputs and outputs and have Twelf verify that the relations are functional according to these designations.

Here is a link to a <twelflink>file containing the Twelf declarations</twelflink> given so far, where, in the case of <tt>cons</tt> and <tt>dat_def</tt>, we have chosen the versions that omitted the quantifiers.  Let's look at <twelflink check="true">Twelf's output</twelflink> for these declarations.  As Twelf checks each declaration for type-correctness, it echoes the declaration in its output, including any reconstructed quantifiers, as you can see in the declarations of <tt>cons</tt> and <tt>dat_def</tt>.  Notice that a couple of identifiers (<tt>nil</tt> and <tt>cons</tt>) were declared more than once; in this case, Twelf remembers only the last declaration for each identifier, silently replacing any previous declarations.