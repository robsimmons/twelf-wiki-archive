{{Summer school 2008
   |noprevious = 
   |nonext = }}

== Add pairs [[Summer school 2008:Typed arithmetic expressions with pairs|(solution)]] ==

Extend the [[Summer school 2008:Typed arithmetic expressions (value)|Typed arithmetic expressions (value)]] language with binary pairs (see [http://www.cs.cmu.edu/~rwh/plbook/book.pdf PFPL Chapter 16] if you need a refresher on the syntax and typing rules for pairs).  

This will be easiest if you start from [[Summer school 2008:Typed arithmetic expressions (value)|Typed arithmetic expressions (value)]].  Use the "Code: here" link in the top-left corner to download the code.

You will need to add:

# a type <tt>prod T U</tt>
# expression constructors for pairing <tt>(pair E1 E2)</tt>, and first and second projection <tt>(fst E)</tt> and <tt>(snd E)</tt>.
# new cases for evaluation

Get Twelf to verify the totality of your extended evaluation judgement.

If you're feeling ambitious, add disjoint sums ([http://www.cs.cmu.edu/~rwh/plbook/book.pdf PFPL Chapter 17]) as well! [[Summer school 2008:Alternate typed arithmetic expressions with sums|(solution)]]

== Getting familiar with Twelf ==

Read the discussion of Twelf's totality checker on  [[Proving_metatheorems:Proving_totality_assertions_about_the_natural_numbers|this page]] so that you understand Twelf's error messages better.

== Call-by-name ==

Do a call-by-name version of evaluation for [[Summer school 2008:Arithmetic expressions with let-binding|Arithmetic expressions with let-binding]].  How would you prove evaluation terminates?