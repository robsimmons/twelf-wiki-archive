Twelf's coverage checker often rules out contradictory cases for you (see, for example, the [[Uniqueness lemmas|proof of determinacy for the simply typed λ-calculus]]).  However, you will sometimes need to reason from contradictory assumptions yourself. You can do this by declaring an ''uninhabited type'', proving that certain assumptions are contradictory, and then writing lemmas that conclude anything from a term of the uninhabited type. 

== The uninhabited type ==

<twelf>uninhabited : type. 
%freeze uninhabited. 
</twelf>

Freezing the intentionally uninhabited type (which is also sometimes called <tt>void</tt>, <tt>false</tt>, or <tt>absurd</tt>) is not strictly necessary, but it clarifies the programmer's intent—Twelf will signal an error if any later part of the signature introduces a term of this type.

== Proving contradictions ==

We use some simple judgements on natural numbers to illustrate proving contradictions.

<twelf>
nat   : type. 
nat/z : nat.
nat/s : nat -> nat.

nat-less   : nat -> nat -> type.
nat-less/z : nat-less nat/z (nat/s N).
nat-less/s : nat-less (nat/s N1) (nat/s N2)
              <- nat-less N1 N2.

nat-plus   : nat -> nat -> nat -> type.
nat-plus/z : nat-plus nat/z N N.
nat-plus/s : nat-plus (nat/s N1) N2 (nat/s N3)
              <- nat-plus N1 N2 N3.
</twelf>

=== Contradiction by coverage checking ===

First, we prove that no number is less than zero:
<twelf check="true">
nat-less-z-uninhabited : nat-less N nat/z 
                          -> uninhabited
                          -> type.
%mode nat-less-z-uninhabited +D1 -D2.
%worlds () (nat-less-z-uninhabited _ _).
%total {} (nat-less-z-uninhabited _ _).
</twelf>
The coverage checker accepts this proof without any cases because there are no rules for deriving <tt>nat-less _ nat/z</tt>.  This is the simplest way to create a contradiction.  

=== Inductive contradictions ===

Some contradictions require an inductive argument.  For example, we can prove that if <tt>N1 < N2</tt> then there is no <tt>N3</tt> such that <tt>N2 + N3 = N1</tt>.
<twelf check="true">
nat-less-plus-uninhabited : nat-less N1 N2
                             -> nat-plus N2 N3 N1
                             -> uninhabited
                             -> type.
%mode nat-less-plus-uninhabited +D1 +D2 -D3.

- : nat-less-plus-uninhabited (nat-less/s NL) (nat-plus/s NP) DU
     <- nat-less-plus-uninhabited NL NP DU.

%worlds () (nat-less-plus-uninhabited _ _ _).
%total (D1) (nat-less-plus-uninhabited D1 _ _).
</twelf>

In this theorem, the coverage checker rules out all cases but the one where the first input is of the form
<code>
nat-less N1 N2
------------------------------nat-less/s
nat-less (nat/s N1) (nat/s N2)
</code>
and the second input is of the form
<code>
nat-plus N2 N3 N1
----------------------------------nat-plus/s
nat-plus (nat/s N2) N3 (nat/s N1)
</code>
To show that this remaining case is contradictory. we apply the inductive hypothesis on the subderivations to derive <tt>uninhabited</tt>, and then return the resulting derivation of <tt>uninhabited</tt> to meet our proof obligations.

With this theorem, the coverage checker rules out all the base cases, so we are able to return a term of type <tt>uninhabited</tt> in the one remaining case by writing a loop.

== Reasoning from contradiction ==

Once you have a contradiction, it is easy to write a lemma that reasons from it.  For example, from <tt>uninhabited</tt> we can conclude that any two numbers are <tt>nat-less</tt>:

<twelf check="true">
uninhabited-nat-less : {N1:nat}{N2:nat}
                         uninhabited
                        -> nat-less N1 N2
                        -> type.
%mode uninhabited-nat-less +D1 +D2 +D3 -D4.
%worlds () (uninhabited-nat-less _ _ _ _).
%total {} (uninhabited-nat-less _ _ _ _).
</twelf>

This proof requires no cases because any case would involve a canonical form of type <tt>uninhabited</tt>.

This lemma could be used in a proof that requires coming up with a derivation of some <tt>less-than</tt> fact in contradictory circumstances.  

For an example where reasoning from contradiction is necessary, see the tutorial on [[hereditary substitution for the STLC]].

{{tutorial}}