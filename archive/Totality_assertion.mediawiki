A '''totality assertion''' is one type of [[metatheorem]] about [[LF]] [[type family|type families]].  A totality assertion for a type family <tt>a</tt> is specified by designating some arguments of the type family as inputs and the remaining arguments as outputs, and by specifying a set of LF contexts.  Then the totality assertion for the type family is the following proposition:

: For all contexts Γ, for all inputs <tt>M</tt> in Γ, there exist outputs <tt>N</tt> in Γ such that the type <tt>a M N</tt> is inhabited in Γ.

In Twelf, totality assertions are specified using [[%mode]] and [[%worlds]] declarations and verified using [[%total]] declarations.  Totality assertions are useful for verifying properties of object-language [[judgment]]s.  Additionally, Twelf's ability to verify totality assertions is used to prove general [[metatheorem]]s.  

== Example totality assertions == 

Consider the following LF signature, which defined addition on natural numbers:

<twelf>
nat : type.
z   : nat.
s   : nat -> nat.

plus   : nat -> nat -> nat -> type.
plus-z : plus z N2 N2.
plus-s : plus (s N1) N2 (s N3)
	  <- plus N1 N2 N3.
</twelf>

A type family such as <tt>plus</tt> defines a relation among its indices, where indices are related iff their instance of the family is inhabited by an LF term.  For example, <tt>plus</tt> defines a relation between three terms of type <tt>nat</tt>.  The terms (<tt>s (s z)</tt>, <tt>s z</tt>, <tt>s (s (s z))</tt>) are related by this relation (because 2 + 1 = 3), but the terms (<tt>z</tt>, <tt>s z</tt>, <tt>s (s (s z))</tt>) are not.

Totality assertions are one class of statements about LF type families. A totality assertion for a type family is specified by designating some index positions as inputs and others positions as outputs.  We call this specification the [[%mode|mode]] of the totality assertion.  Given a mode specification, the totality assertion asserts that for all inputs, there exist outputs that stand in the relation. Using <tt>plus</tt> as an example, if we designate the first two positions as inputs and the third position as an output, this specifies the following totality assertion:

: For all <tt>N1:nat</tt> and <tt>N2:nat</tt>, there exist <tt>N3:nat</tt> and <tt>D:plus N1 N2 N3</tt>.

That is, the sum of any two natural numbers exists.  Designating instead the first position as output and second and third positions as inputs defines the following totality assertion:

: For all <tt>N2:nat</tt> and <tt>N3:nat</tt>, there exist <tt>N1:nat</tt> and <tt>D:plus N1 N2 N3</tt>.

Of course, this totality assertion is false, as <tt>N3 - N2</tt> might not be a natural number.

A totality assertion for an LF type family corresponds with the standard notion of totality for the relation defined by the family.  Proving a relation total is different from showing that the relation defines a function, as the outputs of a total relation are not necessarily unique&mdash;the relation may relate particular inputs to more than one collection of outputs.

We may prove a totality assertion by induction on [[canonical forms]].  For example, we can prove the first above totality assertion by induction on <tt>N1:nat</tt>.  

The above examples consider only terms that are well-typed without mentioning LF variables. In general, it is useful to state totality assertions about all terms that are well-typed in any LF context in a particular [[world]], which is a set of LF contexts.  Thus, a totality assertion is specified by both a mode declaration and a [[%worlds|world declaration]].  

The page on [[%worlds]] presents an example totality assertion in non-empty contexts.

== See also ==
* This page's description of totality assertions was extracted from {{proving|title=Proving totality assertions about the natural numbers}}.  Read that introduction to learn how to prove totality assertions using Twelf, and how to use totality assertions to mechanize proofs of more general [[metatheorem]]s.