{{proving metatheorems
  | next = Proving metatheorems in non-empty contexts
  | nextname = Proving metatheorems in non-empty contexts
  | prev = Proving metatheorems about the STLC
  | prevname = Proving metatheorems}}

So far, we have only proved relations total in the empty LF context.  In this section, we discuss proving totality assertions for relations in more general contexts.  As a motivating example, we define a judgement that computes the size of a STLC term.  

== Definition of Size==

The definition of size uses the definitions of [[Proving metatheorems:Representing the syntax of the natural numbers|natural numbers]], [[Proving metatheorems:Representing the judgements of the natural numbers|addition judgement]], and [[Proving metatheorems:Representing the syntax of the STLC|STLC term syntax]] from earlier in this article.  
<twelf export="syntax" hidden="true">
tp    : type.
unit  : tp.
arrow : tp -> tp -> tp.
 
tm    : type.
empty : tm.
lam   : tp -> (tm -> tm) -> tm.
app   : tm -> tm -> tm.

nat : type.
z   : nat.
s   : nat -> nat.

plus   : nat -> nat -> nat -> type.
%mode plus +X1 +X2 -X3.

plus-z : plus z N2 N2.
plus-s : plus (s N1) N2 (s N3)
	  <- plus N1 N2 N3.

%worlds () (plus _ _ _).
%total N (plus N _ _).
</twelf>
Informally, we define the size of a term as follows:
* <math>\mathsf{}|x| = 1</math>
* <math>|\langle\rangle| = 1</math>
* <math>|e_1 \; e_2| = 1 + |e_1| + |e_2|</math>
* <math>\mathsf{}|\lambda x:\tau.e| = 1 + |e|</math>

We define this function in LF using the following judgement:

<twelf check="true" import="syntax" export="preworld">
size       : tm -> nat -> type.
%mode size +E -N.

size-empty : size empty (s z). 
size-lam   : size (lam _ E) (s N)
		<- ({x : tm} 
                    {_ : size x (s z)}
		      size (E x) N).
size-app   : size (app E1 E2) (s N)
		<- size E1 N1
		<- size E2 N2 
		<- plus N1 N2 N.
</twelf>

The only subtlety in this judgement is that we have recast size as a hypothetical judgement: each variable <tt>x:tm</tt> in the context is assumed to have size 1.  Correspondingly, the premise of the <tt>lam</tt> case extends the context with such an assumption for the bound variable.  

== World Declarations ==

We would like to assert that every term has a size.  However, because the definition of the size judgement extends the LF context, our usual worlds declaration fails:
<twelf import="preworld" discard=true check="decl">
%worlds () (size _ _).
</twelf>

The worlds declaration fails because <tt>size</tt> does not stay in the empty context.

To give an appropriate worlds declaration for this type family, we must first specify the form of the contexts in which we consider it.  We do so with a block declaration:

<twelf import="preworld" export="withworld">
%block size-block : block {x : tm} {_ : size x (s z)}.
%worlds (size-block) (size _ _).
</twelf>

The block declaration names a context block comprised of the assumptions <tt>x:tm, _:size x (s z)</tt>.  The world declaration declares <tt>size</tt> for any context composed of any number of <tt>size-blocks</tt>.  That
is, it specifies that we consider <tt>size</tt> in the [[regular world]] <tt>(size-block)*</tt>.  

In general, Twelf permits regular world declarations of the form <tt>(b1 | b2 | ... | bn)*</tt> for blocks <tt>b1</tt> through <tt>bn</tt> defined by <tt>%block</tt> declarations.

==World Checking==

Up until this point, we have focused on the role a <tt>%worlds</tt> declaration has in specifying a totality assertion.  However, just as <tt>%mode</tt> both specifies the mode of a totality assertion and mode-checks a type family, <tt>%worlds</tt> both specifies the world of a totality assertion and ''world checks'' a type family.  

What property does a world declaration specify?  Intuitively, a world declaration for a type family circumscribes the contexts in which we consider inhabitants of that type family.  For example, the world declaration for <tt>size</tt> says that we should only ever consider terms of type <tt>size</tt> in contexts in <tt>(sizeblock)*</tt>.  Thus, it is a world error if some piece of Twelf code introduces a variable <tt>x:tm</tt> but not a derivation <tt>_:size x (s z)</tt>, or if it introduces a variable <tt>_:size x z</tt>, or if it introduces a variable <tt>_:size empty N</tt>, and so on.  World checking ensures that we only consider a term in the contexts declared for its type.

When Twelf processes a <tt>%worlds</tt> declaration, it world checks each constant in the type family. A constant ''world checks'' under the following condition: whenever the ambient LF context is of the form specified by the world declaration, each premise of the constant occurs in an LF context that is within the world specified for the premise's type family.  For example:
* <tt>size-empty</tt> has no premises, so it vacuously world checks.
* the <tt>size</tt> premise of <tt>size-lam</tt> is in an extended context, but adding <tt>x:tm,_:size x (s z)</tt> to a context in <tt>(size-block)*</tt> creates another context in <tt>(size-block)*</tt>.
* the <tt>size</tt> premises of <tt>size-app</tt> do not extend the LF context, so they are in <tt>(size-block)*</tt> whenever the ambient context is.
* the <tt>plus</tt> premise of <tt>size-app</tt> is '''not''' directly in a context in <tt>plus</tt>'s world (the world containing only the empty context) because the ambient LF context will contain variables of type <tt>tm</tt> and <tt>size</tt>.  However, the call to <tt>plus</tt> is permissible because of something called [[world subsumption]].

===Subordination and world subsumption ===

A context in <tt>(size-block)*</tt> has the form

<tt>x:tm, _:size x (s z), ...</tt>

These contexts are not in the world for <tt>plus</tt>, which contains only the empty LF context.  Thus, it would seem that the call to <tt>plus</tt> from <tt>size</tt> should be deemed a world violation.  

However,  considering derivations of <tt>plus</tt> in contexts of this form is in fact no different from considering these derivations in the empty context, because variables of type <tt>tm</tt> and <tt>size</tt> do not influence the set of terms of type <tt>plus</tt>.  That is, we are considering contexts outside of the world of <tt>plus</tt>, but the extra assumptions in the context are irrelevant to <tt>plus</tt>.  By improving our definition of world checking to account for circumstances like these, we can allow more world correct signatures, while maintaining the property that the world declaration circumcribes the '''relevant''' parts of the contexts in which we consider the terms of that type.  

Formalizing this reasoning requires knowing when terms of one type can appear in terms of another.  This information is tracked by a [[subordination]] relation, which is a pre-order (reflexive and transitive binary relation) on type family constants.  Terms of a type <tt>a</tt> are only permitted to appear in terms of type <tt>b</tt> if <tt>a</tt> is subordinate to <tt>b</tt>.  In practice, Twelf infers a subordination relation from the Twelf signature that permits all relationships implied by the signature.

Using subordination, we define world subsumption as follows:

: '''World subsumption:''' A world <tt>W'</tt> subsumes a world <tt>W</tt> for a type family <tt>a</tt> iff for all contexts Γ' in <tt>W'</tt>, there exists a context Γ in <tt>W</tt> such that Γ and Γ' are equal when restricted to only the declarations at types subordinate to <tt>a</tt>.

For example, <tt>(size-block)*</tt> subsumes the world containing only the empty context for <tt>plus</tt>.  On the other hand, the world <tt>({x:nat})*</tt> does not subsume the world containing only the empty context for <tt>plus</tt>, because adding variables representing more natural numbers is relevant to <tt>plus</tt>.

Using world subsumption, we refine our notion of world checking as follows. A constant world checks iff
# The world of a type family subsumes the world of each of its premises.
# Each premise's local assumptions stay in the world for that type family.
These conditions ensure that whenever the ambient LF context is of the form specified by the world declaration, for each premise of the constant, the world for the premise contains the restriction of the ambient context to the premise appended with the local assumptions made by the premise.

Under this more permissive definition, the <tt>plus</tt> premise of <tt>size</tt> is deemed world-correct.

== Totality assertions in non-empty worlds ==

We now return to the role a world declaration has in specifying totality assertions.  The above mode and world declarations for <tt>size</tt> declare the following totality assertion:

: For all LF contexts Γ in <tt>(size-block)*</tt>, if <tt>Γ {{vdash}} E : tm</tt> then there exist <tt>N</tt> such that <tt>Γ {{vdash}} N : nat</tt> and <tt>D</tt> such that <tt>Γ {{vdash}} D : size E N</tt>.

There are two things to note about this totality assertion:
# It generalizes those that we have seen before, where the world always contained only the empty context and consequently the assertion was about closed terms.
# The context is quantified at the outside and is consistent across all the indices to the type family.  That is, given inputs in a particular context, the relation returns outputs in that same context.

Twelf verifies totality assertions in non-empty contexts in the same manner as before.  If a type family world checks, then the inductive hypothesis of a totality relation for a recursive premise (or the previously established totality assertion for a prior type family) will never fail to apply because of the form of the context.  Thus, the only differences in checking totality assertions for general contexts are that world checking may fail, and that coverage checking must account for variables from the context.  

In this case, Twelf succeeds in proving the totality of <tt>size</tt>.

<twelf check="true" import="withworld" export="withtotal">
%total E (size E _).
</twelf>

== Example world errors ==

In this section, we show some example world errors.  For comparison, we collect the complete correct definition of <tt>size</tt> here:

<twelf check="true" import="syntax" discard=true>
size       : tm -> nat -> type.
%mode size +E -N.

size-empty : size empty (s z). 
size-lam   : size (lam _ E) (s N)
		<- ({x : tm} 
                    {_ : size x (s z)}
		      size (E x) N).
size-app   : size (app E1 E2) (s N)
		<- size E1 N1
		<- size E2 N2 
		<- plus N1 N2 N.

%block size-block : block {x : tm} {_ : size x (s z)}.
%worlds (size-block) (size _ _).
%total E (size E _).
</twelf>

=== Premise in an incorrect context ===

One possible world error is to write a premise whose local context extensions do not stay in the appropriate world.   For example, if we forgot the <tt>size</tt> assumption in the <tt>lam</tt> case, Twelf would report an error:

<twelf import="preworld" discard=true check="decl">
size-lam   : size (lam _ E) (s N)
		<- ({x : tm} 		   
                      size (E x) N).
%block size-block : block {x : tm} {_ : size x (s z)}.
%worlds (size-block) (size _ _).
</twelf>

=== World subsumption failure ===

Another possible world error is that world subsumption could fail.  For example, if <tt>size</tt> were stated for a  world containing natural number assumptions (which of course ruins the adequacy of <tt>nat</tt> for the natural numbers), it would not be permissible to call <tt>plus</tt>:

<twelf import="preworld" discard=true check="decl">
%block size-block : block {x : tm} {_ : size x (s z)}.
%block natblock : block {x:nat}.
%worlds (natblock | size-block) (size _ _).
</twelf>

=== Totality failure because of a forgotten assumption ===

Finally, a type family can be world correct but fail to define a total relation if we consider the theorem in an improper world.  For example, say we had defined <tt>size</tt> as follows:

<twelf check="decl" import="syntax" discard=true>
size       : tm -> nat -> type.
%mode size +E -N.

size-empty : size empty (s z). 
size-lam   : size (lam _ E) (s N)
		<- ({x : tm} size (E x) N).
size-app   : size (app E1 E2) (s N)
		<- size E1 N1
		<- size E2 N2 
		<- plus N1 N2 N.

%block size-block : block {x : tm}.
%worlds (size-block) (size _ _).
%total E (size E _).
</twelf>

This definition world checks because the context in <tt>size-lam</tt> is of the form specified by the world declaration.  However, the type family <tt>size</tt> does not define a total relation because it does not cover 
variables <tt>x:tm</tt> in the LF context.  A total relation must cover both the LF constants in the signature and the LF variables in all contexts in the world.

{{proving metatheorems
  | next = Proving metatheorems in non-empty contexts
  | nextname = Proving metatheorems in non-empty contexts
  | prev = Proving metatheorems about the STLC
  | prevname = Proving metatheorems}}