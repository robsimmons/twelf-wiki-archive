The preferred way to interact with Twelf is through its emacs mode, which is included in the Twelf distribution. The [[Download]] page has basic information for setting up Emacs mode with Twelf.

==Prerequisites==

These instructions assume you've already [[Download|downloaded Twelf]], and that either 
* You used the Windows/OSX installer
* You downloaded a pre-compiled tarball
* You downloaded a source tarball and have already built Twelf

These instructions should easily translate to using Subversion to get Twelf, however.

==Installing the Twelf emacs mode==

Add the following to your Emacs configuration file, which should be the file .emacs in your home directory. 

<code>(setq twelf-root "/somewhere/twelf/")
(load (concat twelf-root "emacs/twelf-init.el"))</code>

For instance, if the directory where you unpacked the tarball is <tt>/usr/local/twelf</tt>, then you'll want those two lines to be:

<code>(setq twelf-root "/usr/local/twelf/")
(load (concat twelf-root "emacs/twelf-init.el"))</code>

If your Twelf directory is <tt>/home/foo/stuff/logic/twelf</tt>, then you'll want those lines to be:

<code>(setq twelf-root "/home/foo/stuff/logic/twelf/")
(load (concat twelf-root "emacs/twelf-init.el"))</code>

If you used the default Windows installer, you'll want those to lines to be 

<code>(setq twelf-root "C:\\Program Files\\Twelf\\")
(load (concat twelf-root "emacs\\twelf-init.el"))</code>

Exit Emacs and restart it.

== How Twelf programs are divided up into files ==

# Twelf programs should be stored in files with the <tt>.elf</tt> extension.  
# All of the <tt>.elf</tt> files in a project are collected in a ''configuration file'', typically called <tt>sources.cfg</tt>.  A configuration file lists (paths to) individual <tt>.elf</tt> files in dependency order.  You can load a configuration file, which loads each <tt>.elf</tt> file in sequence.

=== Creating a .cfg file ===

Start Emacs in some directory (for the purposes of this description, we'll assume it's <tt>~/tmp/twelf</tt>. Create the '''configuration file''' <tt>sources.cfg</tt> with the following text in it:

<code>sometwelf.elf</code>

Save the file (by using CTRL-x CTRL-s in Emacs).

=== Creating a .elf file ===

Then create a file <tt>sometwelf.elf</tt> (by using CTRL-x CTRL-f in Emacs) and enter the following text:

<twelf>
nat : type.
z : nat.
s : nat -> nat.
ss : nat -> nat = [n] s (s n).

plus : nat -> nat -> nat -> type.
plus/z : plus z N N.
plus/s : plus N M P -> plus (s N) M (s P).
</twelf>

Save the file (by using CTRL-x CTRL-s in Emacs).

== Using the Twelf emacs mode ==

You use Twelf by asking it to process declarations. Twelf responds by either printing <tt>Server OK</tt> at the bottom of the screen if your declarations were processed successfully, or by popping up the twelf-server buffer if there was an error (ABORT).

The emacs mode allows you to process declarations at a variety of granularities:
* A whole configuration file (CTRL-c CTRL-c loads a cfg file)
* A whole .elf file (CTRL-c CTRL-s loads the .elf file open in the current emacs window)
* A single declaration (thing ending in a period) (CTRL-c CTRL-d loads declaration the cursor is on in the in the current .elf file)

For example, a typical use case is to load your entire project with CTRL-c CTRL-c when you start working, and then to process new Twelf code declaration-by-declaration as you write it, using CTRL-c CTRL-d.  Sometimes you will go back and make edits in lots of different places in a file, in which case it's helpful to reload just the current file with CTRL-c CTRL-s. 

Only reloading the configuration clears the state of Twelf. Even reloading will not clear previous declarations from the file (though it will typically shadow them). This might give unexpected results if you remove a declaration and expect it to have disappeared.

=== Loading the configuration file: CTRL-c CTRL-c ===

Assuming you still have <tt>sometwelf.elf</tt> open in emacs, hit CTRL-c CTRL-c. If <tt>sometwelf.elf</tt> has unsaved changes, you will be asked:

<code>File not in current configuration. Save? (yes or no)</code>

Type yes.

You will then be asked:

<code>Visit config file: (default sources.cfg) ~/tmp/twelf/</code>

This is asking for the location of the sources.cfg file you saved when following the instructions above; the default option is the correct one. Just hit ENTER.

You will then be asked:

<code>Twelf server: (default twelf-server) /something/bin/</code>
This is asking which Twelf binary you want to run; the default should already be correct, just hit ENTER.

This will process your configuration file, which in turn says to process <tt>sometwelf.elf</tt>.

=== Checking an individual declaration: CTRL-c CTRL-d ===

Now you can type new declarations into the emacs buffer and use CTRL-c CTRL-d to load them.

=== Checking an individual file: CTRL-c CTRL-s ===

Or you can reload the file in the current window with CTRL-c CTRL-s.  You must previously have loaded a configuration file.

== Syntax highlighting ==

Twelf does not automatically refresh its syntax highlighting as you type.  You can manually refresh the highlighting as follows:

# <tt>CTRL-c l</tt> fontifies the currently visible emacs buffer.  E.g. in <tt>sometwelf.elf</tt>m the constants (<tt>nat</tt>, <tt>plus/z</tt>, etc.) should turn red, the bound variable <tt>n</tt> should turn green, and the logic-programming variables <tt>N</tt>, <tt>M</tt>, and <tt>P</tt> should turn blue.
# <tt>CTRL-c CTRL-l</tt> fontifies the current declaration only.  This is useful if you have really big files.

For more info on the emacs mode, see {{guide|chapter=13|section=74|title=Emacs Interface}}.

==Hacks==

If you use multiple frames with Emacs, <tt>twelf-mode</tt> annoyingly pops up the Twelf server buffer in the current frame, even if it is already shown in another frame. To avoid this, set <tt>display-buffer-reuse-frames</tt> to <tt>t</tt>. Now, you will still have the problem that although the buffer is shown, it does not scroll to the bottom; to fix this you need to edit <tt>twelf.el</tt> and change <code>(get-buffer-window twelf-server-buffer)</code> to <code>(get-buffer-window twelf-server-buffer t)</code>.

== See also ==
* {{guide|chapter=13|section=74|title=Emacs Interface}}