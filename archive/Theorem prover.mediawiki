The '''Twelf theorem prover''' is a way of specifying and automatically verifying [[metatheorems]] that have the form of {{forall}}{{exists}}-statements. It uses the Twelf declarations <tt>[[%theorem]]</tt>, <tt>[[%prove]]</tt>, <tt>[[%establish]]</tt>, and <tt>[[%assert]]</tt>. The last of these is an [[unsafe mode|unsafe]] operation similar to <tt>[[%trustme]]</tt>.

The current theorem prover is buggy, sometimes does not terminate, and does not output a total logic program that can be used to witness the {{forall}}{{exists}}-statement as described in {{guide|title=Proof realizations|section=62|chapter=10}}. Because of this, it cannot interact with the technique of verifying metatheorems by writing [[totality assertions]], and its use is not recommended.

== Example - commutativity of addition ==

=== Object language ===

We start with the standard presentation of the [[natural numbers]] with addition. 

<twelf>
nat : type.
s : nat -> nat.
z : nat.

plus : nat -> nat -> nat -> type.
p-z : plus z N N.
p-s : plus (s N1) N2 (s N3) <- plus N1 N2 N3.
</twelf>

=== Establishing {{forall}}{{exists}}-metatheorems with totality assertions ===

A simple [[metatheorem]] about this object language is the {{forall}}{{exists}}-statement that for all natural numbers <math>\texttt{}N</math>, there exists a derivation of <math>\texttt{plus}(N,0,N)</math>. This translates into LF as a {{forall}}{{exists}}-statement that for all objects <tt>N</tt> with type <tt>nat</tt>, there exists an object <tt>D</tt> of type <tt>plus N z N</tt>. 

The "usual" way of proving this kind of metatheorem in Twelf is to define a type family which represents a relation, translate the cases of the inductive proof into LF objects in that type family, and use a <tt>[[%mode]]</tt> directive and <tt>[[%worlds]]</tt> directive to specify a [[totality assertion]] that corresponds to the {{forall}}{{exists}}-statement. The totality assertion for type family <tt>plus-z-thm</tt> below establishes the {{forall}}{{exists}}-statement that is stated above.

<twelf discard="true" check="true">
plus-z-thm : {N: nat} plus N z N -> type.

- : plus-z-thm z p-z.
- : plus-z-thm (s N) (p-s D)
     <- plus-z-thm N D.

%mode plus-z-thm +N -D.
%worlds () (plus-z-thm _ _).
%total T (plus-z-thm T _).
</twelf>

=== Establishing {{forall}}{{exists}}-metatheorems with the theorem prover ===

The equivalent of the type family definition for <tt>plus-z-thm</tt> and the <tt>%mode</tt> declaration from the above code can be stated with a <tt>[[%theorem]]</tt>.

<twelf>
%theorem plus-z : forall {N: nat} 
                  exists {D: plus N z N} 
                  true.
</twelf>

(Side note: some versions of Twelf allow the <tt>%theorem</tt> declaration above to be used in lieu of the type family definition and <tt>%mode</tt> declaration; [[User:Boyland|John Boyland]] utilizes this in his tutorial and code examples, but it is not a supported feature and may break in future versions of Twelf!)

Given the <tt>%theorem</tt> declaration, we can ask Twelf to try to establish the metatheorem it states by using a <tt>[[%prove]]</tt> declaration.

<twelf check=decl>
%prove 5 N (plus-z N D).
</twelf>

We can also include the equivalent of [[implicit parameters]] in our metatheorem statements, but unlike the standard method where we define a new type family, all our implicit parameters must be listed after the <tt>forall*</tt> keyword. We can then prove two more metatheorems (the second is the commutativity of addition).

<twelf>
%theorem plus-s : forall* {N1: nat}{N2: nat}{N3: nat}
                  forall {D1: plus N1 N2 N3} 
                  exists {D2: plus N1 (s N2) (s N3)} 
                  true.
%prove 5 D1 (plus-s D1 D2).

%theorem plus-comm : forall* {N1: nat}{N2: nat}{N3: nat}
                 forall {D1: plus N1 N2 N3} 
                 exists {D2: plus N2 N1 N3} 
                 true.
%prove 5 D1 (plus-comm D1 D2).
</twelf>

== See also ==

* {{guide|title=Theorem Prover|chapter=10|section=57}}