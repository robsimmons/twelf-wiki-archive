{{undocumented}}
When Twelf [[%total|proves that an LF type family defines a total relation]], it checks that the output of each premise of each constant can never fail to unify with an output that is actually produced.  This is called [[output coverage]] checking.  One way in which a premise can fail output coverage checking is if its output is a metavariable that is constrained by appearing elsewhere in the constant.  

'''Output freeness checking''' ensures that no outputs are constrained in such a manner.  More precisely, the output freeness check ensures that a metavariable in an output position does not occur in any previous input or output (where "previous" is the same order used in [[%mode]] checkingâ€”i.e., the search order of the [[logic programming]] operational semantics).  

Prior to Twelf 1.5, output freeness checking was not implemented, allowing some false metatheorems to check. 

== Simple example ==

As a first output freeness violation, consider the following buggy definition of the addition relation on natural numbers:

<twelf export="nat">
nat : type.
s : nat -> nat.
z : nat.
</twelf>

<twelf export="ex1" import="nat">
add : nat -> nat -> nat -> type.
%mode add +M +N -O.

add/z : add M z M.

add/s-incorrect : add M (s N) (s N)
                   <- add M N N.

%worlds () (add _ _ _).
</twelf>

This type family <tt>add</tt> clearly does not define a total relation: the constant <tt>add/s-incorrect</tt> only applies when <tt>add M N N</tt>, but in general it is possible to derive <tt>add M N O</tt> for <tt>O</tt> not equal to <tt>N</tt> (and the constant <tt>add-s-incorrect</tt> is the only constant that covers the case when the second number is a successor, so the relation is clearly not total without this constant).  

Thus, Twelf reports an output coverage error on this constant when we attempt to check totality:

<twelf check="decl" import="ex1">
%total N (add _ N _).
</twelf>

Twelf reports an output freeness error: the output metavariable <tt>N</tt> occurs previously because <tt>N</tt> is an input to the relation.

== Uniqueness example ==

It is common to encounter output freeness errors when working with relations that have unique outputs.  For example, consider a correct definition of <tt>add</tt>:

<twelf export="ex3" import="nat">
add : nat -> nat -> nat -> type.
%mode add +M +N -O.

add/z : add M z M.

add/s-incorrect : add M (s N) (s O)
                   <- add M N O.
%worlds () (add _ _ _).
%total N (add _ N _).
</twelf>

This relation satisfies a [[uniqueness lemma]] stating that the first two indices (the summands) uniquely determine the third (the sum).

Now, suppose we use <tt>add</tt> to define another relation:

<twelf import="ex3">
add2 : nat -> nat -> type.
%mode add2 +N -O.

- : add2 N O
      <- add (s (s z)) N O
      <- add (s (s z)) N O.

%worlds () (add2 _ _).
</twelf>

Here, we have unnecessarily copied the <tt>add</tt> premise twice.  However, because <tt>add</tt> satisfies the aforementioned uniqueness lemma, it is, in fact, correct to insist that we get the same output <tt>O</tt> in each case.  Unfortunately, Twelf is not aware of this uniqueness lemma, so it flags an error:

<twelf import="ex3" check="decl">
%total {} (add2 _ _).
</twelf>

The second output occurrence of <tt>O</tt> occurs previously in the first one.

This example, where we explicitly repeat a premise, is clearly avoidable.  However, analogous situations do come up in practice, and to work around them, you must prove and use the [[uniqueness lemma]] explicitly.  

== Non-free implicit outputs ==

Another common source of output freeness errors is constraining implicit outputs that appear in the types of other outputs.

{{needs|an example of this point}}

This is where output freeness violations usually come up in connection with unique relations: if we have a derivation <tt>D : add M N O</tt> and a premise that returns another derivation of <tt>D' : add M N O'</tt>, a common error is to insist that <tt>O'</tt> be <tt>O</tt> (which in fact it must be, but Twelf doesn't know this).  Even though we match the output derivation <tt>D'</tt> with a fresh metavariable, we get an output freeness error because we constrain the type of <tt>D'</tt>.  

{{tutorial}}