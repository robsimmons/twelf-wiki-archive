Twelf is based on the logical framework [[LF]]. When we write down a logical system (an [[object logic]] such as a programming language) in Twelf, we are defining the objects and judgments of our language as LF types and terms. 
The correctness criterion for such a representation is called '''adequacy'''.  An LF representation is '''adequate''' iff it is isomorphic to the original description of the object logic. Specifically, we require a ''compositional bijection'' between the original description and the LF representations, which means that:

# There is a bijection between object language entities and LF objects of a particular type (the "bijection" part).
# For representations that use  [[higher-order abstract syntax]] and [[higher-order judgment]]s, LF's notion of substitution correctly models object-language substitution (the "compositional" part). 

See the introductory article [[Proving metatheorems with Twelf]], as well as Harper and Licata's paper <ref>{{bibtex:hl07mechanizing}}</ref>, for example adequacy statements and proofs.

== References ==

<references/>

* [[Proving metatheorems with Twelf]]
* [http://www-2.cs.cmu.edu/~rwh/papers/how/believe-twelf.pdf How to Believe a Twelf Proof]
{{bibtex:hhp93lf}}

{{stub}}